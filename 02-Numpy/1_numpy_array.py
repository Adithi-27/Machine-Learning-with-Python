# -*- coding: utf-8 -*-
"""1. Numpy Array.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DJlNJzkS8JSf7UQ-ur0ndSoHlkwT4INx
"""

import numpy as np

my_list = [1,2,3]
my_array = np.array([1,2,3])

type(my_list)

"""## Creating NumPy Arrays from Objects

### From a Python List
"""

my_list = [1,2,3]
my_list

np.array(my_list)

my_matrix = [[1,2,3],[4,5,6],[7,8,9]]
my_matrix

np.array(my_matrix)

"""## Built-in Methods to create arrays

### arange
"""

np.arange(0,10)

np.arange(0,11,2)

"""### zeros and ones"""

np.zeros(3)

np.zeros((5,5))

np.ones(3)

np.ones((3,3))

"""### linspace
Return evenly spaced numbers over a specified interval.
"""

np.linspace(0,10,3)

np.linspace(0,5,20)

np.linspace(0,5,21)

"""### eye"""

np.eye(4)

"""## Random
Numpy also has lots of ways to create random number arrays:

### rand
Creates an array of the given shape and populates it with random samples from a uniform distribution over ``[0, 1)``.
"""

np.random.rand(2)

np.random.rand(5,5)

"""### randn

Returns a sample (or samples) from the "standard normal" distribution [Ïƒ = 1]. Unlike **rand** which is uniform, values closer to zero are more likely to appear.
"""

np.random.randn(2)

np.random.randn(5,5)

"""### randint
Returns random integers from `low` (inclusive) to `high` (exclusive).
"""

np.random.randint(1,100)

np.random.randint(1,100,10)

"""### seed
Can be used to set the random state, so that the same "random" results can be reproduced.
"""

np.random.seed(42)
np.random.rand(4)

np.random.seed(42)
np.random.rand(4)

"""## Array Attributes and Methods"""

arr = np.arange(25)
ranarr = np.random.randint(0,50,10)

arr

ranarr

"""## Reshape
Returns an array containing the same data with a new shape.
"""

arr.reshape(5,5)

"""### max, min, argmax, argmin

These are useful methods for finding max or min values. Or to find their index locations using argmin or argmax
"""

ranarr

ranarr.max()

ranarr.argmax()

ranarr.min()

ranarr.argmin()

"""## Shape

Shape is an attribute that arrays have (not a method):
"""

# Vector
arr.shape

# Notice the two sets of brackets
arr.reshape(1,25)

arr.reshape(1,25).shape

arr.reshape(25,1)

arr.reshape(25,1).shape

"""### dtype

You can also grab the data type of the object in the array:
"""

arr.dtype

arr2 = np.array([1.2, 3.4, 5.6])
arr2.dtype